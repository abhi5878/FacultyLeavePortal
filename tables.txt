--Create department table
create table department(
	dept_name varchar(6) PRIMARY KEY
);

-- Create faculty table -->
create table faculty(
	faculty_id int PRIMARY KEY,
	name varchar(20) not null,
	email varchar(20) not null,
	mobile_no varchar(10) not null,
	dept_name varchar(6) not null,
	FOREIGN KEY(dept_name) REFERENCES department(dept_name)
);

-- Create login table --
create table login_data(
	id SERIAL NOT NULL,
	username varchar(20) not null PRIMARY KEY,
	password varchar(20) default '123',
	faculty_id int,
	FOREIGN KEY(faculty_id) REFERENCES faculty(faculty_id)
	
);

-- create hod table
-- write a trigger to check if insertion in this table satisfy
-- by defaul hod will have period of 2 years 
-- following condition :-
-- department of faculty is same as department of which he is been appointing as HoD
-- trigger_name -> verify_hod
-- another trigger on deletion from hod
-- which will store the deleting value in table old_hod
create table hod(
	faculty_id int not null,
	dept_name varchar(6) PRIMARY KEY,
	start_date DATE default CURRENT_DATE,
	end_date DATE default CURRENT_DATE + 730,
	FOREIGN KEY(faculty_id) REFERENCES faculty(faculty_id),
	FOREIGN KEY(dept_name) REFERENCES department(dept_name)
)

-- store all cross faculty role in an institution
create table cross_faculty_role(
	cross_role varchar(30) PRIMARY KEY
)

--cross cutting faculty appointed
-- each appointed role will have 3 year period default
create table cross_cutting_faculty(
	faculty_id int default null,
	cross_role varchar(30) PRIMARY KEY,
	start_date DATE default CURRENT_DATE,
	end_date DATE default CURRENT_DATE + 730,
	FOREIGN KEY (faculty_id) REFERENCES faculty(faculty_id),
	FOREIGN KEY (cross_role) REFERENCES cross_faculty_role(cross_role)
)

--Director table
-- each appointed role will have 4 year period default
create table director(
	faculty_id int default null,
	role varchar(10) default 'director',
	start_date DATE default CURRENT_DATE,
	end_date DATE default CURRENT_DATE + 730,
	FOREIGN KEY (faculty_id) REFERENCES faculty(faculty_id),
	PRIMARY KEY role
)

--max_leave table
create table max_leave(
	max_leave int not null,
	current_year DATE default CURRENT_DATE
)

-- TABLE TO STORE remaining leave for each faculty
create table remaining_leave(
	faculty_id int PRIMARY KEY,
	remaining_leave int not null default 0,
	FOREIGN KEY (faculty_id) REFERENCES faculty(faculty_id)
)

---------------------------------------------------------------------------------
--restart the databse
---------------------------------------------------------------------------------
delete from login_data;
delete from faculty;
delete from hod;
delete from cross_cutting_faculty;
delete from old_faculty;
delete from old_hod;
delete from old_cross_cutting_faculty;
	
